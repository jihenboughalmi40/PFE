(function(){"use strict";var __webpack_modules__={1861:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval("\n;// CONCATENATED MODULE: external [\"wp\",\"domReady\"]\nvar external_wp_domReady_namespaceObject = window[\"wp\"][\"domReady\"];\nvar external_wp_domReady_default = /*#__PURE__*/__webpack_require__.n(external_wp_domReady_namespaceObject);\n;// CONCATENATED MODULE: external \"moment\"\nvar external_moment_namespaceObject = window[\"moment\"];\nvar external_moment_default = /*#__PURE__*/__webpack_require__.n(external_moment_namespaceObject);\n;// CONCATENATED MODULE: external \"lodash\"\nvar external_lodash_namespaceObject = window[\"lodash\"];\n;// CONCATENATED MODULE: external [\"wp\",\"i18n\"]\nvar external_wp_i18n_namespaceObject = window[\"wp\"][\"i18n\"];\n;// CONCATENATED MODULE: external [\"wp\",\"date\"]\nvar external_wp_date_namespaceObject = window[\"wp\"][\"date\"];\n;// CONCATENATED MODULE: ./src/blocks/helpers/helper-functions.js\n\n\n // HTML to Plaintext\n\nconst unescapeHTML = value => {\n  const htmlNode = document.createElement('div');\n  htmlNode.innerHTML = value;\n\n  if (htmlNode.innerText !== undefined) {\n    return htmlNode.innerText;\n  }\n\n  return htmlNode.textContent;\n}; // Format Date\n\nconst formatDate = date => {\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  date = new Date(date);\n  const day = date.getDate();\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n  return day + ' ' + monthNames[monthIndex] + ', ' + year;\n}; // Create a list with numbers from interval [start, end]\n\nconst range = (start, end, step) => {\n  const range = [];\n  const typeofStart = typeof start;\n  const typeofEnd = typeof end;\n\n  if (0 === step) {\n    throw TypeError('Step cannot be zero.');\n  }\n\n  if (undefined === typeofStart || undefined === typeofEnd) {\n    throw TypeError('Must pass start and end arguments.');\n  } else if (typeofStart !== typeofEnd) {\n    throw TypeError('Start and end arguments must be of same type.');\n  }\n\n  if (undefined === typeof step) {\n    step = 1;\n  }\n\n  if (end < start) {\n    step = -step;\n  }\n\n  if ('number' === typeofStart) {\n    while (0 < step ? end >= start : end <= start) {\n      range.push(start);\n      start += step;\n    }\n  } else if ('string' === typeofStart) {\n    if (1 !== start.length || 1 !== end.length) {\n      throw TypeError('Only strings with one character are supported.');\n    }\n\n    start = start.charCodeAt(0);\n    end = end.charCodeAt(0);\n\n    while (0 < step ? end >= start : end <= start) {\n      range.push(String.fromCharCode(start));\n      start += step;\n    }\n  } else {\n    throw TypeError('Only string and number types are supported');\n  }\n\n  return range;\n}; // Easing functions for animation\n\nconst linear = x => {\n  return x;\n};\nconst easeInSine = x => {\n  return 1 - Math.cos(x * Math.PI / 2);\n};\nconst easeOutSine = x => {\n  return Math.sin(x * Math.PI / 2);\n};\nconst easeInOutSine = x => {\n  return -(Math.cos(Math.PI * x) - 1) / 2;\n};\nconst getCustomPostTypeSlugs = async () => {\n  const dataTypes = await new window.wp.api.collections.Types().fetch();\n\n  if (dataTypes) {\n    const allExistingSlugs = Object.keys(dataTypes).filter(type => {\n      var _dataTypes$type;\n\n      return (_dataTypes$type = dataTypes[type]) === null || _dataTypes$type === void 0 ? void 0 : _dataTypes$type.slug;\n    }).map(type => dataTypes[type].slug);\n    return without(allExistingSlugs, 'attachment', 'wp_block');\n  }\n\n  return undefined;\n};\nconst convertToTitleCase = word => {\n  if ('string' === typeof word || word instanceof String) {\n    return word[0].toUpperCase() + word.slice(1);\n  }\n\n  throw 'The parameter must be a string.';\n};\n/**\n * Insert an item between the element of the array\n *\n * @param {Array} arr\n * @param {any}   item\n * @returns An array with the given item inserted between initial elements\n */\n\nconst insertBetweenItems = (arr, item) => {\n  const _arr = [];\n  arr === null || arr === void 0 ? void 0 : arr.forEach((listItem, index) => {\n    _arr.push(listItem); // Omit to add for the last list item\n\n\n    if (index < arr.length - 1) {\n      _arr.push(item);\n    }\n  });\n  return _arr;\n}; // Time constants\n\nconst _MS_PER_SECONDS = 1000;\n\nconst _MS_PER_MINUTES = _MS_PER_SECONDS * 60;\n\nconst _MS_PER_HOURS = _MS_PER_MINUTES * 60;\n\nconst _MS_PER_DAY = _MS_PER_HOURS * 24;\n/**\n * Get the time interval from the unix time\n *\n * @param {number} unixTime Time as UNIX\n * @param {Object} settings Options to keep a components or/and allow negative time\n * @returns An object with the values for days, hours, minutes, seconds\n */\n\n\nconst getIntervalFromUnix = (unixTime, settings) => {\n  unixTime = unixTime ? unixTime : 0; // Check for null/undefined\n\n  const days = Math.floor(unixTime / _MS_PER_DAY);\n  const hours = Math.floor(unixTime / _MS_PER_HOURS % 24);\n  const minutes = Math.floor(unixTime / _MS_PER_MINUTES % 60);\n  const seconds = Math.floor(unixTime / _MS_PER_SECONDS % 60);\n  const time = [{\n    tag: 'day',\n    name: 1 < days ? 'Days' : 'Day',\n    value: days\n  }, {\n    tag: 'hour',\n    name: 1 < hours ? 'Hours' : 'Hour',\n    value: hours\n  }, {\n    tag: 'minute',\n    name: 1 < minutes ? 'Minutes' : 'Minute',\n    value: minutes\n  }, {\n    tag: 'second',\n    name: 1 < seconds ? 'Seconds' : 'Second',\n    value: seconds\n  }].filter(({\n    tag\n  }) => {\n    var _settings$exclude;\n\n    return !(settings !== null && settings !== void 0 && (_settings$exclude = settings.exclude) !== null && _settings$exclude !== void 0 && _settings$exclude.includes(tag));\n  }).map(obj => {\n    if (!(settings !== null && settings !== void 0 && settings.keepNeg)) {\n      obj.value = Math.max(0, obj.value);\n    }\n\n    return obj;\n  });\n  return time;\n}; // Get site's timezone.\n\nconst getTimezone = () => {\n  const settings = (0,external_wp_date_namespaceObject.__experimentalGetSettings)();\n\n  const offset = 60 * settings.timezone.offset;\n  const sign = 0 > offset ? '-' : '+';\n  const absmin = Math.abs(offset);\n  const timezone = (0,external_wp_i18n_namespaceObject.sprintf)('%s%02d:%02d', sign, absmin / 60, absmin % 60);\n  return timezone;\n};\n;// CONCATENATED MODULE: ./src/blocks/frontend/countdown/index.js\n/**\n * WordPress dependencies\n */\n\n\n/**\n * Internal dependencies\n */\n\n\n/**\n * Get an object with the update function for every component\n *\n * @param {HTMLDivElement} root\n * @returns {Object.<string, Function>}\n */\n\nconst getComponentsUpdate = root => {\n  return ['second', 'minute', 'hour', 'day'].reduce((acc, componentName) => {\n    const elem = root.querySelector(`div[name=${componentName}]`);\n\n    if (elem) {\n      const labelElem = elem.querySelector('.otter-countdown__label');\n      const valueElem = elem.querySelector('.otter-countdown__value');\n\n      acc[componentName] = (labelName, value) => {\n        if (parseInt(valueElem.innerHTML) !== value) {\n          valueElem.innerHTML = value;\n        }\n\n        labelElem.innerHTML = labelName;\n      };\n    }\n\n    return acc;\n  }, {});\n};\n/**\n *\n * @param {*} date             The deadline of the countdown\n * @param {*} updateComponents The object with the update functions\n * @returns {Function} Function that update the countdown every time it is called. You can send a callback to be triggered when is finised.\n */\n\n\nconst updateTime = (date, updateComponents) => {\n  let _date = date + getTimezone();\n\n  _date = external_moment_default()(_date).unix() * 1000;\n  return onFinishCb => {\n    const time = getIntervalFromUnix(_date - Date.now());\n    time.forEach(({\n      tag,\n      value,\n      name\n    }) => {\n      var _updateComponents$tag;\n\n      (_updateComponents$tag = updateComponents[tag]) === null || _updateComponents$tag === void 0 ? void 0 : _updateComponents$tag.call(updateComponents, name, value);\n    });\n\n    if (0 >= time) {\n      onFinishCb();\n    }\n  };\n};\n\nexternal_wp_domReady_default()(() => {\n  const countdowns = document.querySelectorAll('.wp-block-themeisle-blocks-countdown');\n  countdowns.forEach(countdown => {\n    const date = countdown.dataset.date;\n\n    if (date) {\n      const update = updateTime(date, getComponentsUpdate(countdown));\n      const interval = setInterval(() => {\n        update(() => clearInterval(interval));\n      }, 500);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1861\n")}},__webpack_require__={n:function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return __webpack_require__.d(F,{a:F}),F},d:function(Q,F){for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},o:function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)}},__webpack_exports__={};__webpack_modules__[1861](0,__webpack_exports__,__webpack_require__)})();