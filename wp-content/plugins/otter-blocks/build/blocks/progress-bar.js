(function(){"use strict";var __webpack_modules__={6651:function(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__){eval("\n;// CONCATENATED MODULE: external [\"wp\",\"domReady\"]\nvar external_wp_domReady_namespaceObject = window[\"wp\"][\"domReady\"];\nvar external_wp_domReady_default = /*#__PURE__*/__webpack_require__.n(external_wp_domReady_namespaceObject);\n;// CONCATENATED MODULE: external \"lodash\"\nvar external_lodash_namespaceObject = window[\"lodash\"];\n;// CONCATENATED MODULE: external [\"wp\",\"i18n\"]\nvar external_wp_i18n_namespaceObject = window[\"wp\"][\"i18n\"];\n;// CONCATENATED MODULE: external [\"wp\",\"date\"]\nvar external_wp_date_namespaceObject = window[\"wp\"][\"date\"];\n;// CONCATENATED MODULE: ./src/blocks/helpers/helper-functions.js\n\n\n // HTML to Plaintext\n\nconst unescapeHTML = value => {\n  const htmlNode = document.createElement('div');\n  htmlNode.innerHTML = value;\n\n  if (htmlNode.innerText !== undefined) {\n    return htmlNode.innerText;\n  }\n\n  return htmlNode.textContent;\n}; // Format Date\n\nconst formatDate = date => {\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  date = new Date(date);\n  const day = date.getDate();\n  const monthIndex = date.getMonth();\n  const year = date.getFullYear();\n  return day + ' ' + monthNames[monthIndex] + ', ' + year;\n}; // Create a list with numbers from interval [start, end]\n\nconst range = (start, end, step) => {\n  const range = [];\n  const typeofStart = typeof start;\n  const typeofEnd = typeof end;\n\n  if (0 === step) {\n    throw TypeError('Step cannot be zero.');\n  }\n\n  if (undefined === typeofStart || undefined === typeofEnd) {\n    throw TypeError('Must pass start and end arguments.');\n  } else if (typeofStart !== typeofEnd) {\n    throw TypeError('Start and end arguments must be of same type.');\n  }\n\n  if (undefined === typeof step) {\n    step = 1;\n  }\n\n  if (end < start) {\n    step = -step;\n  }\n\n  if ('number' === typeofStart) {\n    while (0 < step ? end >= start : end <= start) {\n      range.push(start);\n      start += step;\n    }\n  } else if ('string' === typeofStart) {\n    if (1 !== start.length || 1 !== end.length) {\n      throw TypeError('Only strings with one character are supported.');\n    }\n\n    start = start.charCodeAt(0);\n    end = end.charCodeAt(0);\n\n    while (0 < step ? end >= start : end <= start) {\n      range.push(String.fromCharCode(start));\n      start += step;\n    }\n  } else {\n    throw TypeError('Only string and number types are supported');\n  }\n\n  return range;\n}; // Easing functions for animation\n\nconst linear = x => {\n  return x;\n};\nconst easeInSine = x => {\n  return 1 - Math.cos(x * Math.PI / 2);\n};\nconst easeOutSine = x => {\n  return Math.sin(x * Math.PI / 2);\n};\nconst easeInOutSine = x => {\n  return -(Math.cos(Math.PI * x) - 1) / 2;\n};\nconst getCustomPostTypeSlugs = async () => {\n  const dataTypes = await new window.wp.api.collections.Types().fetch();\n\n  if (dataTypes) {\n    const allExistingSlugs = Object.keys(dataTypes).filter(type => {\n      var _dataTypes$type;\n\n      return (_dataTypes$type = dataTypes[type]) === null || _dataTypes$type === void 0 ? void 0 : _dataTypes$type.slug;\n    }).map(type => dataTypes[type].slug);\n    return without(allExistingSlugs, 'attachment', 'wp_block');\n  }\n\n  return undefined;\n};\nconst convertToTitleCase = word => {\n  if ('string' === typeof word || word instanceof String) {\n    return word[0].toUpperCase() + word.slice(1);\n  }\n\n  throw 'The parameter must be a string.';\n};\n/**\n * Insert an item between the element of the array\n *\n * @param {Array} arr\n * @param {any}   item\n * @returns An array with the given item inserted between initial elements\n */\n\nconst insertBetweenItems = (arr, item) => {\n  const _arr = [];\n  arr === null || arr === void 0 ? void 0 : arr.forEach((listItem, index) => {\n    _arr.push(listItem); // Omit to add for the last list item\n\n\n    if (index < arr.length - 1) {\n      _arr.push(item);\n    }\n  });\n  return _arr;\n}; // Time constants\n\nconst _MS_PER_SECONDS = 1000;\n\nconst _MS_PER_MINUTES = _MS_PER_SECONDS * 60;\n\nconst _MS_PER_HOURS = _MS_PER_MINUTES * 60;\n\nconst _MS_PER_DAY = _MS_PER_HOURS * 24;\n/**\n * Get the time interval from the unix time\n *\n * @param {number} unixTime Time as UNIX\n * @param {Object} settings Options to keep a components or/and allow negative time\n * @returns An object with the values for days, hours, minutes, seconds\n */\n\n\nconst getIntervalFromUnix = (unixTime, settings) => {\n  unixTime = unixTime ? unixTime : 0; // Check for null/undefined\n\n  const days = Math.floor(unixTime / _MS_PER_DAY);\n  const hours = Math.floor(unixTime / _MS_PER_HOURS % 24);\n  const minutes = Math.floor(unixTime / _MS_PER_MINUTES % 60);\n  const seconds = Math.floor(unixTime / _MS_PER_SECONDS % 60);\n  const time = [{\n    tag: 'day',\n    name: 1 < days ? 'Days' : 'Day',\n    value: days\n  }, {\n    tag: 'hour',\n    name: 1 < hours ? 'Hours' : 'Hour',\n    value: hours\n  }, {\n    tag: 'minute',\n    name: 1 < minutes ? 'Minutes' : 'Minute',\n    value: minutes\n  }, {\n    tag: 'second',\n    name: 1 < seconds ? 'Seconds' : 'Second',\n    value: seconds\n  }].filter(({\n    tag\n  }) => {\n    var _settings$exclude;\n\n    return !(settings !== null && settings !== void 0 && (_settings$exclude = settings.exclude) !== null && _settings$exclude !== void 0 && _settings$exclude.includes(tag));\n  }).map(obj => {\n    if (!(settings !== null && settings !== void 0 && settings.keepNeg)) {\n      obj.value = Math.max(0, obj.value);\n    }\n\n    return obj;\n  });\n  return time;\n}; // Get site's timezone.\n\nconst getTimezone = () => {\n  const settings = __experimentalGetSettings();\n\n  const offset = 60 * settings.timezone.offset;\n  const sign = 0 > offset ? '-' : '+';\n  const absmin = Math.abs(offset);\n  const timezone = sprintf('%s%02d:%02d', sign, absmin / 60, absmin % 60);\n  return timezone;\n};\n;// CONCATENATED MODULE: ./src/blocks/frontend/progress-bar/index.js\n/**\n * WordPress dependencies\n */\n\n/**\n * Internal dependencies\n */\n\n\nexternal_wp_domReady_default()(() => {\n  const progressBars = document.querySelectorAll('.wp-block-themeisle-blocks-progress-bar');\n  Array.from(progressBars).forEach(progressBar => {\n    const duration = progressBar.dataset.duration * 1000;\n    const bar = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__area__bar');\n    let borderRadius = window.getComputedStyle(bar).borderTopLeftRadius.replace('px', '') || 0;\n    const number = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__number');\n    const tooltip = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__area__tooltip');\n    const append = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__progress__append');\n    const outerTitle = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__outer__title');\n    const innerTitle = progressBar.querySelector('.wp-block-themeisle-blocks-progress-bar__area__title');\n    let titleWidth;\n\n    if (outerTitle) {\n      titleWidth = outerTitle.getBoundingClientRect().width;\n    } else if (innerTitle) {\n      titleWidth = innerTitle.getBoundingClientRect().width;\n    }\n\n    const numberWidth = window.getComputedStyle(bar).height.replace('px', '') * 0.5;\n\n    if (tooltip && !outerTitle) {\n      tooltip.style.opacity = 1;\n    }\n\n    if (0 === duration) {\n      bar.style.width = `${parseInt(progressBar.dataset.percent)}%`;\n      number.innerHTML = `${parseInt(progressBar.dataset.percent)}%`;\n      bar.style.opacity = 1;\n\n      if (tooltip) {\n        tooltip.style.opacity = 1;\n      }\n\n      if (append) {\n        append.style.opacity = 1;\n      }\n    } else {\n      if (number) {\n        number.innerText = '0%';\n      }\n\n      if (innerTitle && innerTitle.classList.contains('highlight')) {\n        borderRadius *= 2;\n      }\n\n      const options = {\n        root: null,\n        rootMargin: '0px',\n        threshold: [0.6]\n      };\n      const observer = new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            if (0 >= entry.intersectionRect.height) {\n              bar.style.width = `${parseInt(progressBar.dataset.percent)}%`;\n              number.innerHTML = `${parseInt(progressBar.dataset.percent)}%`;\n              bar.style.opacity = 1;\n\n              if (tooltip) {\n                tooltip.style.opacity = 1;\n              }\n\n              if (append) {\n                append.style.opacity = 1;\n              }\n\n              observer.unobserve(bar);\n              return;\n            }\n\n            let interval;\n\n            if (interval) {\n              clearInterval(interval);\n            }\n\n            const step = 20; // for a more smother animation, decrease the value\n\n            const totalPercent = parseInt(progressBar.dataset.percent);\n            const percentPerTime = range(0, duration, step).map(x => linear(x / duration) * totalPercent).reverse();\n            interval = setInterval(() => {\n              const value = percentPerTime.pop();\n              bar.style.width = `${value}%`;\n\n              if (number) {\n                number.innerText = `${Math.ceil(value)}%`;\n              }\n\n              const currentWidth = bar.getBoundingClientRect().width;\n\n              if (currentWidth > borderRadius) {\n                bar.style.opacity = 1;\n              }\n\n              if (tooltip && outerTitle) {\n                if (currentWidth > titleWidth + 10) {\n                  tooltip.style.opacity = 1;\n                }\n              }\n\n              if (append) {\n                if (innerTitle) {\n                  if (currentWidth > titleWidth + numberWidth * 1.5) {\n                    append.style.opacity = 1;\n                  }\n                } else if (currentWidth > numberWidth * 1.8) {\n                  append.style.opacity = 1;\n                }\n              }\n\n              if (!percentPerTime.length) {\n                observer.unobserve(bar);\n                clearInterval(interval);\n              }\n            }, step);\n          }\n        });\n      }, options);\n      setTimeout(() => observer.observe(bar), 100);\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6651\n")}},__webpack_require__={n:function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return __webpack_require__.d(F,{a:F}),F},d:function(Q,F){for(var B in F)__webpack_require__.o(F,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:F[B]})},o:function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)}},__webpack_exports__={};__webpack_modules__[6651](0,__webpack_exports__,__webpack_require__)})();